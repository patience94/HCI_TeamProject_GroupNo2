# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cam', [dirname(__file__)])
        except ImportError:
            import _cam
            return _cam
        if fp is not None:
            try:
                _mod = imp.load_module('_cam', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cam = swig_import_helper()
    del swig_import_helper
else:
    import _cam
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cam.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _cam.SwigPyIterator_value(self)
    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _cam.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" : return _cam.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _cam.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _cam.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _cam.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _cam.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _cam.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _cam.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _cam.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _cam.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _cam.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _cam.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _cam.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _cam.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _cam.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cam.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::core::Base *" : return _cam.Base___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Base___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Base___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Base_classType
    if _newclass:classType = staticmethod(_cam.Base_classType)
    __swig_destroy__ = _cam.delete_Base
    __del__ = lambda self : None;
    def _get_objectType(self) -> "char const *" : return _cam.Base__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Base__get_isValid(self)
Base_swigregister = _cam.Base_swigregister
Base_swigregister(Base)

def Base_classType() -> "char const *" :
  return _cam.Base_classType()
Base_classType = _cam.Base_classType

Base.__swig_getmethods__["objectType"] = Base._get_objectType
Base.objectType = property(Base._get_objectType, doc="Returns a string indicating the type of the object.")

Base.__swig_getmethods__["isValid"] = Base._get_isValid
Base.isValid = property(Base._get_isValid, doc="Indicates if this object is still valid, i.e. hasn't been deleted or some other action done to invalidate the reference.")

import adsk.core
class SetupSheetFormats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetupSheetFormats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetupSheetFormats, name)
    __repr__ = _swig_repr
    HTMLFormat = _cam.SetupSheetFormats_HTMLFormat
    ExcelFormat = _cam.SetupSheetFormats_ExcelFormat
    def __init__(self): 
        this = _cam.new_SetupSheetFormats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cam.delete_SetupSheetFormats
    __del__ = lambda self : None;
SetupSheetFormats_swigregister = _cam.SetupSheetFormats_swigregister
SetupSheetFormats_swigregister(SetupSheetFormats)

class OperationTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationTypes, name)
    __repr__ = _swig_repr
    MillingOperation = _cam.OperationTypes_MillingOperation
    TurningOperation = _cam.OperationTypes_TurningOperation
    JetOperation = _cam.OperationTypes_JetOperation
    def __init__(self): 
        this = _cam.new_OperationTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cam.delete_OperationTypes
    __del__ = lambda self : None;
OperationTypes_swigregister = _cam.OperationTypes_swigregister
OperationTypes_swigregister(OperationTypes)

class PostOutputUnitOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PostOutputUnitOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PostOutputUnitOptions, name)
    __repr__ = _swig_repr
    DocumentUnitsOutput = _cam.PostOutputUnitOptions_DocumentUnitsOutput
    InchesOutput = _cam.PostOutputUnitOptions_InchesOutput
    MillimetersOutput = _cam.PostOutputUnitOptions_MillimetersOutput
    def __init__(self): 
        this = _cam.new_PostOutputUnitOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cam.delete_PostOutputUnitOptions
    __del__ = lambda self : None;
PostOutputUnitOptions_swigregister = _cam.PostOutputUnitOptions_swigregister
PostOutputUnitOptions_swigregister(PostOutputUnitOptions)

class OperationStrategyTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationStrategyTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationStrategyTypes, name)
    __repr__ = _swig_repr
    AdaptiveClearing2D = _cam.OperationStrategyTypes_AdaptiveClearing2D
    Pocket2D = _cam.OperationStrategyTypes_Pocket2D
    Face = _cam.OperationStrategyTypes_Face
    Contour2D = _cam.OperationStrategyTypes_Contour2D
    Slot = _cam.OperationStrategyTypes_Slot
    Trace = _cam.OperationStrategyTypes_Trace
    Thread = _cam.OperationStrategyTypes_Thread
    Bore = _cam.OperationStrategyTypes_Bore
    Circular = _cam.OperationStrategyTypes_Circular
    Engrave = _cam.OperationStrategyTypes_Engrave
    AdaptiveClearing = _cam.OperationStrategyTypes_AdaptiveClearing
    PocketClearing = _cam.OperationStrategyTypes_PocketClearing
    Parallel = _cam.OperationStrategyTypes_Parallel
    Contour = _cam.OperationStrategyTypes_Contour
    Ramp = _cam.OperationStrategyTypes_Ramp
    Horizontal = _cam.OperationStrategyTypes_Horizontal
    Pencil = _cam.OperationStrategyTypes_Pencil
    Scallop = _cam.OperationStrategyTypes_Scallop
    Spiral = _cam.OperationStrategyTypes_Spiral
    Radial = _cam.OperationStrategyTypes_Radial
    MorphedSpiral = _cam.OperationStrategyTypes_MorphedSpiral
    Projection = _cam.OperationStrategyTypes_Projection
    Drilling = _cam.OperationStrategyTypes_Drilling
    Jet2D = _cam.OperationStrategyTypes_Jet2D
    TurningChamfer = _cam.OperationStrategyTypes_TurningChamfer
    TurningFace = _cam.OperationStrategyTypes_TurningFace
    TurningGroove = _cam.OperationStrategyTypes_TurningGroove
    TurningPart = _cam.OperationStrategyTypes_TurningPart
    TurningProfile = _cam.OperationStrategyTypes_TurningProfile
    TurningProfileGroove = _cam.OperationStrategyTypes_TurningProfileGroove
    TurningStockTransfer = _cam.OperationStrategyTypes_TurningStockTransfer
    TurningThread = _cam.OperationStrategyTypes_TurningThread
    def __init__(self): 
        this = _cam.new_OperationStrategyTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cam.delete_OperationStrategyTypes
    __del__ = lambda self : None;
OperationStrategyTypes_swigregister = _cam.OperationStrategyTypes_swigregister
OperationStrategyTypes_swigregister(OperationStrategyTypes)

class OperationStates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationStates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperationStates, name)
    __repr__ = _swig_repr
    IsValidOperationState = _cam.OperationStates_IsValidOperationState
    IsInvalidOperationState = _cam.OperationStates_IsInvalidOperationState
    SuppressedOperationState = _cam.OperationStates_SuppressedOperationState
    NoToolpathOperationState = _cam.OperationStates_NoToolpathOperationState
    def __init__(self): 
        this = _cam.new_OperationStates()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cam.delete_OperationStates
    __del__ = lambda self : None;
OperationStates_swigregister = _cam.OperationStates_swigregister
OperationStates_swigregister(OperationStates)

class CAM(adsk.core.Product):
    """Object that represents the CAM environment of a Fusion document."""
    __swig_setmethods__ = {}
    for _s in [adsk.core.Product]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAM, name, value)
    __swig_getmethods__ = {}
    for _s in [adsk.core.Product]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAM, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAM *" : return _cam.CAM___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAM___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAM___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAM_classType
    if _newclass:classType = staticmethod(_cam.CAM_classType)
    __swig_destroy__ = _cam.delete_CAM
    __del__ = lambda self : None;
    def _get_setups(self) -> "adsk::core::Ptr< adsk::cam::Setups >" :
        """Returns the Setups collection that provides access to existing setups"""
        return _cam.CAM__get_setups(self)

    def export3MFForDefaultAdditiveSetup(self, *args) -> "bool" :
        """
        Exports the default additive setup's models into a 3mf file. The 3mf also contains machine and support information. 
        True on success, false on errors or wrong setup type
        """
        return _cam.CAM_export3MFForDefaultAdditiveSetup(self, *args)

    def generateToolpath(self, *args) -> "adsk::core::Ptr< adsk::cam::GenerateToolpathFuture >" :
        """
        Generates/Regenerates all of the toolpaths (including those nested in sub-folders or patterns) 
        for the specified objects. 
        operations : An Operation, Setup, Folder or Pattern object for which to generate the toolpath/s for. You can also
        specify a collection of any combination of these object types. 
        Return GenerateToolpathFuture that includes the status of toolpath generation.
        """
        return _cam.CAM_generateToolpath(self, *args)

    def generateAllToolpaths(self, *args) -> "adsk::core::Ptr< adsk::cam::GenerateToolpathFuture >" :
        """
        Generates/Regenerates all toolpaths (includes those nested in sub-folders or patterns) in the document. 
        skipValid : Option to skip valid toolpaths and only regenerate invalid toolpaths. 
        Return GenerateToolpathFuture that includes the status of toolpath generation.
        """
        return _cam.CAM_generateAllToolpaths(self, *args)

    def clearToolpath(self, *args) -> "bool" :
        """
        Clears all of the toolpaths (including those nested in sub-folders or patterns) for the specified objects. 
        operations : An Operation, Setup, Folder or Pattern object for which to clear the toolpath/s for. You can also
        specify a collection of any combination of these object types. 
        Return true if successful.
        """
        return _cam.CAM_clearToolpath(self, *args)

    def clearAllToolpaths(self) -> "bool" :
        """
        Clears all the toolpaths (includes those nested in sub-folders or patterns) in the document 
        Return true if successful.
        """
        return _cam.CAM_clearAllToolpaths(self)

    def checkToolpath(self, *args) -> "bool" :
        """
        Checks if toolpath operations (including those nested in sub-folders or patterns) are valid for the specified objects. 
        operations : An Operation, Setup, Folder or Pattern object for which to check the toolpath/s of. You can also
        specify a collection of any combination of these object types. 
        Returns true if the toolpath operations are valid
        """
        return _cam.CAM_checkToolpath(self, *args)

    def checkAllToolpaths(self) -> "bool" :
        """
        Checks if all the toolpath operations (includes those nested in sub-folders or patterns) in the document are valid 
        Returns true if the all toolpath operations are valid
        """
        return _cam.CAM_checkAllToolpaths(self)

    def postProcess(self, *args) -> "bool" :
        """
        Post all of the toolpaths (including those nested in sub-folders or patterns) for the specified objects 
        operations : An Operation, Setup, Folder or Pattern object for which to post the toolpath/s of. You can also
        specify a collection of any combination of these object types. 
        input : The PostProcessInput object that defines the post options and parameters. 
        Returns true if successful
        """
        return _cam.CAM_postProcess(self, *args)

    def postProcessAll(self, *args) -> "bool" :
        """
        Post all of the toolpaths (includes those nested in sub-folders or patterns)in the document 
        input : The PostProcessInput object that defines the post options and parameters. 
        Returns true if successful
        """
        return _cam.CAM_postProcessAll(self, *args)

    def generateSetupSheet(self, *args) -> "bool" :
        """
        Generate the setup sheets for the specified objects 
        operations : An Operation, Setup, Folder or Pattern object for which to generate the setup sheet/s for. You can also
        specify a collection of any combination of these object types. 
        format : The document format for the setup sheet. Valid options are HTMLFormat and ExcelFormat.
        Limitation: 'ExcelFormat' can be used in windows OS only. 
        folder : The destination folder to locate the setup sheet documents in. 
        openDocument : An option to allow to open the document instantly after the generation. By default, the document is opened. 
        Returns true if successful
        """
        return _cam.CAM_generateSetupSheet(self, *args)

    def generateAllSetupSheets(self, *args) -> "bool" :
        """
        Generates all of the setup sheets for all of the operations in the document 
        format : The document format for the setup sheet. Valid options are HTMLFormat and ExcelFormat.
        Limitation: 'ExcelFormat' can be used in windows OS only. 
        folder : The destination folder to locate the setup sheet documents in. 
        openDocument : An option to allow to open the document instantly after the generation. By default, the document is opened. 
        Returns true if successful
        """
        return _cam.CAM_generateAllSetupSheets(self, *args)

    def _get_allOperations(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Gets a collection containing all of the operations in the document.
        This includes all operations nested in folders and patterns.
        """
        return _cam.CAM__get_allOperations(self)

    def _get_genericPostFolder(self) -> "std::string" :
        """Gets the installed post folder."""
        return _cam.CAM__get_genericPostFolder(self)

    def _get_personalPostFolder(self) -> "std::string" :
        """Gets the personal post folder."""
        return _cam.CAM__get_personalPostFolder(self)

    def _get_temporaryFolder(self) -> "std::string" :
        """Gets the folder for temporary files."""
        return _cam.CAM__get_temporaryFolder(self)

    def getMachiningTime(self, *args) -> "adsk::core::Ptr< adsk::cam::MachiningTime >" :
        """
        Get the machining time for the specified objects. 
        operations : An Operation, Setup, Folder or Pattern object for which to get the machining time for. You can also
        specify a collection of any combination of these object types. 
        feedScale : The feed scale value (%) to use. 
        rapidFeed : The rapid feed rate in centimeters per second. 
        toolChangeTime : The tool change time in seconds. 
        Returns a MachiningTime object that has properties holding the calculation results.
        """
        return _cam.CAM_getMachiningTime(self, *args)

    def _get_customGraphicsGroups(self) -> "adsk::core::Ptr< adsk::fusion::CustomGraphicsGroups >" :
        """Returns the customGraphicsGroups object associated with the CAM product."""
        return _cam.CAM__get_customGraphicsGroups(self)

    def _get_designRootOccurrence(self) -> "adsk::core::Ptr< adsk::fusion::Occurrence >" :
        """Returns the occurrence that references the design root component in CAM product."""
        return _cam.CAM__get_designRootOccurrence(self)

    def _get_flatPatternOccurrences(self) -> "adsk::core::Ptr< adsk::fusion::OccurrenceList >" :
        """Returns a read only list of flat pattern occurrences in CAM product."""
        return _cam.CAM__get_flatPatternOccurrences(self)

    def _get_allMachines(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """Gets a collection containing all of the machines in the document."""
        return _cam.CAM__get_allMachines(self)

    def _get_parentDocument(self) -> "adsk::core::Ptr< adsk::core::Document >" :
        """Returns the parent Document object."""
        return _cam.CAM__get_parentDocument(self)

    def _get_unitsManager(self) -> "adsk::core::Ptr< adsk::core::UnitsManager >" :
        """Returns the UnitsManager object associated with this product."""
        return _cam.CAM__get_unitsManager(self)

    def _get_workspaces(self) -> "adsk::core::Ptr< adsk::core::WorkspaceList >" :
        """Returns the workspaces associated with this product."""
        return _cam.CAM__get_workspaces(self)

    def _get_productType(self) -> "std::string" :
        """
        Returns the product type name of this product. A list of all of
        the possible product types can be obtained by using the 
        Application.supportedProductTypes property.
        """
        return _cam.CAM__get_productType(self)

    def findAttributes(self, *args) -> "std::vector< adsk::core::Ptr< adsk::core::Attribute >,std::allocator< adsk::core::Ptr< adsk::core::Attribute > > >" :
        """
        Find attributes attached to objects in this product that match the group and or attribute name.
        This does not find attributes attached directly to the Product or Document objects but finds the
        attributes attached to entities within the product.
        The search string for both the groupName and attributeName arguments can be either an absolute 
        name value, or a regular expression. With an absolute name, the search string must match the
        entire groupName or attributeName, including case. An empty string will match everything.
        For example if you have an attribute group named 'MyStuff' that contains the attribute 'Length1', 
        using the search string 'MyStuff' as the group name and 'Length1' as the attribute name will 
        find the attributes with those names. Searching for 'MyStuff' as the group name and '' as the
        attribute name will find all attributes that have 'MyStuff' as the group name.
        Regular expressions provide a more flexibile way of searching. To use a regular expression, 
        prefix the input string for the groupName or attributeName arguments with 're:'. The regular
        expression much match the entire group or attribute name. For example if you have a group that
        contains attributes named 'Length1', 'Length2', 'Width1', and 'Width2' and want to find any 
        of the length attributes you can use a regular expression using the string 're:Length.*'. For more
        information on attributes see the Attributes topic in the user manual. 
        groupName : The search string for the group name. See above for more details. 
        attributeName : The search string for the attribute name. See above for more details. 
        An array of Attribute objects that were found. An empty array is returned if no attributes were found.
        """
        return _cam.CAM_findAttributes(self, *args)

    def _get_attributes(self) -> "adsk::core::Ptr< adsk::core::Attributes >" :
        """Returns the collection of attributes associated with this product."""
        return _cam.CAM__get_attributes(self)

    def deleteEntities(self, *args) -> "bool" :
        """
        Deletes the specified set of entities that are associated with this product. 
        entities : An ObjectCollection containing the list of entities to delete. 
        Returns True if any of the entities provided in the list were deleted. If
        entities were specified that can't be deleted or aren't owned by this product,
        they are ignored.
        """
        return _cam.CAM_deleteEntities(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.CAM__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAM__get_isValid(self)
CAM_swigregister = _cam.CAM_swigregister
CAM_swigregister(CAM)

def CAM_classType() -> "char const *" :
  return _cam.CAM_classType()
CAM_classType = _cam.CAM_classType

CAM.__swig_getmethods__["setups"] = CAM._get_setups
CAM.setups = property(CAM._get_setups, doc="Returns the Setups collection that provides access to existing setups")

CAM.__swig_getmethods__["allOperations"] = CAM._get_allOperations
CAM.allOperations = property(CAM._get_allOperations, doc="Gets a collection containing all of the operations in the document.\nThis includes all operations nested in folders and patterns.")

CAM.__swig_getmethods__["genericPostFolder"] = CAM._get_genericPostFolder
CAM.genericPostFolder = property(CAM._get_genericPostFolder, doc="Gets the installed post folder.")

CAM.__swig_getmethods__["personalPostFolder"] = CAM._get_personalPostFolder
CAM.personalPostFolder = property(CAM._get_personalPostFolder, doc="Gets the personal post folder.")

CAM.__swig_getmethods__["temporaryFolder"] = CAM._get_temporaryFolder
CAM.temporaryFolder = property(CAM._get_temporaryFolder, doc="Gets the folder for temporary files.")

CAM.__swig_getmethods__["customGraphicsGroups"] = CAM._get_customGraphicsGroups
CAM.customGraphicsGroups = property(CAM._get_customGraphicsGroups, doc="Returns the customGraphicsGroups object associated with the CAM product.")

CAM.__swig_getmethods__["designRootOccurrence"] = CAM._get_designRootOccurrence
CAM.designRootOccurrence = property(CAM._get_designRootOccurrence, doc="Returns the occurrence that references the design root component in CAM product.")

CAM.__swig_getmethods__["flatPatternOccurrences"] = CAM._get_flatPatternOccurrences
CAM.flatPatternOccurrences = property(CAM._get_flatPatternOccurrences, doc="Returns a read only list of flat pattern occurrences in CAM product.")

CAM.__swig_getmethods__["allMachines"] = CAM._get_allMachines
CAM.allMachines = property(CAM._get_allMachines, doc="Gets a collection containing all of the machines in the document.")

CAM.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAM) else None
CAM.cast = lambda arg: arg if isinstance(arg, CAM) else None

class CAMFolders(Base):
    """Collection that provides access to the folders within an existing setup, folder or pattern."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMFolders, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMFolders, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMFolders *" : return _cam.CAMFolders___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMFolders___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMFolders___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.CAMFolders___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMFolder >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.CAMFolders___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMFolders_classType
    if _newclass:classType = staticmethod(_cam.CAMFolders_classType)
    __swig_destroy__ = _cam.delete_CAMFolders
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMFolder >" :
        """
        Function that returns the specified folder using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.CAMFolders_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMFolder >" :
        """
        Returns the folder with the specified name (as appears in the browser). 
        name : The name (as it appears in the browser) of the folder. 
        Returns the specified folder or null in the case where there is no folder with the specified name.
        """
        return _cam.CAMFolders_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """The number of items in the collection."""
        return _cam.CAMFolders__get_count(self)

    def itemByOperationId(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMFolder >" :
        """
        Returns the folder with the specified operation id. 
        id : The id of the folder. 
        Returns the specified folder or null in the case where there is no folder with the specified operation id.
        """
        return _cam.CAMFolders_itemByOperationId(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.CAMFolders__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMFolders__get_isValid(self)
CAMFolders_swigregister = _cam.CAMFolders_swigregister
CAMFolders_swigregister(CAMFolders)

def CAMFolders_classType() -> "char const *" :
  return _cam.CAMFolders_classType()
CAMFolders_classType = _cam.CAMFolders_classType

CAMFolders.__swig_getmethods__["count"] = CAMFolders._get_count
CAMFolders.count = property(CAMFolders._get_count, doc="The number of items in the collection.")

CAMFolders.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMFolders) else None
CAMFolders.cast = lambda arg: arg if isinstance(arg, CAMFolders) else None

class CAMParameter(Base):
    """Base class for representing parameter of an operation."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMParameter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMParameter *" : return _cam.CAMParameter___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMParameter___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMParameter___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMParameter_classType
    if _newclass:classType = staticmethod(_cam.CAMParameter_classType)
    __swig_destroy__ = _cam.delete_CAMParameter
    __del__ = lambda self : None;
    def _get_name(self) -> "std::string" :
        """Gets the name (internal name) of the parameter."""
        return _cam.CAMParameter__get_name(self)

    def _get_title(self) -> "std::string" :
        """
        Returns the title of this parameter as seen in the user interface.
        This title is localized and can change based on the current language
        """
        return _cam.CAMParameter__get_title(self)

    def _get_expression(self) -> "std::string" :
        """Gets and sets the value expression of the parameter."""
        return _cam.CAMParameter__get_expression(self)

    def _set_expression(self, *args) -> "bool" :
        """Gets and sets the value expression of the parameter."""
        return _cam.CAMParameter__set_expression(self, *args)

    def _get_isEnabled(self) -> "bool" :
        """
        Gets if this parameter is enabled. Some parameters are enabled/disabled depending on the values 
        set for other parameters.
        """
        return _cam.CAMParameter__get_isEnabled(self)

    def _get_error(self) -> "std::string" :
        """Returns a message corresponding to any active error associated with the value of this parameter."""
        return _cam.CAMParameter__get_error(self)

    def _get_warning(self) -> "std::string" :
        """Returns a message corresponding to any active warning associated with the value of this parameter."""
        return _cam.CAMParameter__get_warning(self)

    def _get_objectType(self) -> "char const *" : return _cam.CAMParameter__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMParameter__get_isValid(self)
CAMParameter_swigregister = _cam.CAMParameter_swigregister
CAMParameter_swigregister(CAMParameter)

def CAMParameter_classType() -> "char const *" :
  return _cam.CAMParameter_classType()
CAMParameter_classType = _cam.CAMParameter_classType

CAMParameter.__swig_getmethods__["name"] = CAMParameter._get_name
CAMParameter.name = property(CAMParameter._get_name, doc="Gets the name (internal name) of the parameter.")

CAMParameter.__swig_getmethods__["title"] = CAMParameter._get_title
CAMParameter.title = property(CAMParameter._get_title, doc="Returns the title of this parameter as seen in the user interface.\nThis title is localized and can change based on the current language")

CAMParameter.__swig_getmethods__["expression"] = CAMParameter._get_expression
CAMParameter.__swig_setmethods__["expression"] = CAMParameter._set_expression
CAMParameter.expression = property(CAMParameter._get_expression, CAMParameter._set_expression, doc="Gets and sets the value expression of the parameter.")

CAMParameter.__swig_getmethods__["isEnabled"] = CAMParameter._get_isEnabled
CAMParameter.isEnabled = property(CAMParameter._get_isEnabled, doc="Gets if this parameter is enabled. Some parameters are enabled/disabled depending on the values\nset for other parameters.")

CAMParameter.__swig_getmethods__["error"] = CAMParameter._get_error
CAMParameter.error = property(CAMParameter._get_error, doc="Returns a message corresponding to any active error associated with the value of this parameter.")

CAMParameter.__swig_getmethods__["warning"] = CAMParameter._get_warning
CAMParameter.warning = property(CAMParameter._get_warning, doc="Returns a message corresponding to any active warning associated with the value of this parameter.")

CAMParameter.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMParameter) else None
CAMParameter.cast = lambda arg: arg if isinstance(arg, CAMParameter) else None

class CAMParameters(Base):
    """Collection that provides access to the parameters of an existing operation."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMParameters, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMParameters *" : return _cam.CAMParameters___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMParameters___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMParameters___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.CAMParameters___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMParameter >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.CAMParameters___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMParameters_classType
    if _newclass:classType = staticmethod(_cam.CAMParameters_classType)
    __swig_destroy__ = _cam.delete_CAMParameters
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMParameter >" :
        """
        Function that returns the specified parameter using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.CAMParameters_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMParameter >" :
        """
        Returns the parameter of the specified id (internal name). 
        internalName : The id (internal name) of the parameter. 
        Returns the specified parameter or null in the case where there is no parameter with the specified id.
        """
        return _cam.CAMParameters_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """The number of items in the collection."""
        return _cam.CAMParameters__get_count(self)

    def _get_objectType(self) -> "char const *" : return _cam.CAMParameters__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMParameters__get_isValid(self)
CAMParameters_swigregister = _cam.CAMParameters_swigregister
CAMParameters_swigregister(CAMParameters)

def CAMParameters_classType() -> "char const *" :
  return _cam.CAMParameters_classType()
CAMParameters_classType = _cam.CAMParameters_classType

CAMParameters.__swig_getmethods__["count"] = CAMParameters._get_count
CAMParameters.count = property(CAMParameters._get_count, doc="The number of items in the collection.")

CAMParameters.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMParameters) else None
CAMParameters.cast = lambda arg: arg if isinstance(arg, CAMParameters) else None

class CAMPatterns(Base):
    """Collection that provides access to the patterns within an existing setup, folder or pattern."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMPatterns, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMPatterns, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMPatterns *" : return _cam.CAMPatterns___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMPatterns___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMPatterns___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.CAMPatterns___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMPattern >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.CAMPatterns___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMPatterns_classType
    if _newclass:classType = staticmethod(_cam.CAMPatterns_classType)
    __swig_destroy__ = _cam.delete_CAMPatterns
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMPattern >" :
        """
        Function that returns the specified pattern using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.CAMPatterns_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMPattern >" :
        """
        Returns the pattern with the specified name (as appears in the browser). 
        name : The name (as it appears in the browser) of the pattern. 
        Returns the specified pattern or null in the case where there is no pattern with the specified name.
        """
        return _cam.CAMPatterns_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """The number of items in the collection."""
        return _cam.CAMPatterns__get_count(self)

    def itemByOperationId(self, *args) -> "adsk::core::Ptr< adsk::cam::CAMPattern >" :
        """
        Returns the pattern with the specified operation id. 
        id : The id of the pattern. 
        Returns the specified pattern or null in the case where there is no pattern with the specified operation id.
        """
        return _cam.CAMPatterns_itemByOperationId(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.CAMPatterns__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMPatterns__get_isValid(self)
CAMPatterns_swigregister = _cam.CAMPatterns_swigregister
CAMPatterns_swigregister(CAMPatterns)

def CAMPatterns_classType() -> "char const *" :
  return _cam.CAMPatterns_classType()
CAMPatterns_classType = _cam.CAMPatterns_classType

CAMPatterns.__swig_getmethods__["count"] = CAMPatterns._get_count
CAMPatterns.count = property(CAMPatterns._get_count, doc="The number of items in the collection.")

CAMPatterns.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMPatterns) else None
CAMPatterns.cast = lambda arg: arg if isinstance(arg, CAMPatterns) else None

class ChildOperationList(Base):
    """Provides access to the collection of child operations, folders and patterns of an existing setup."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChildOperationList, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChildOperationList, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::ChildOperationList *" : return _cam.ChildOperationList___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.ChildOperationList___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.ChildOperationList___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.ChildOperationList___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::core::Base >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.ChildOperationList___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.ChildOperationList_classType
    if _newclass:classType = staticmethod(_cam.ChildOperationList_classType)
    __swig_destroy__ = _cam.delete_ChildOperationList
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::core::Base >" :
        """
        Returns the specified item using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.ChildOperationList_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::core::Base >" :
        """
        Returns the operation, folder or pattern with the specified name (the name seen in the browser). 
        name : The name of the operation, folder or pattern as seen in the browser. 
        Returns the specified item or null in the case where there is no item with the specified name.
        """
        return _cam.ChildOperationList_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """Gets the number of objects in the collection."""
        return _cam.ChildOperationList__get_count(self)

    def itemByOperationId(self, *args) -> "adsk::core::Ptr< adsk::core::Base >" :
        """
        Returns the operation, folder or pattern with the specified operation id. 
        id : The id of the operation, folder or pattern. 
        Returns the specified item or null in the case where there is no item with the specified operation id.
        """
        return _cam.ChildOperationList_itemByOperationId(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.ChildOperationList__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.ChildOperationList__get_isValid(self)
ChildOperationList_swigregister = _cam.ChildOperationList_swigregister
ChildOperationList_swigregister(ChildOperationList)

def ChildOperationList_classType() -> "char const *" :
  return _cam.ChildOperationList_classType()
ChildOperationList_classType = _cam.ChildOperationList_classType

ChildOperationList.__swig_getmethods__["count"] = ChildOperationList._get_count
ChildOperationList.count = property(ChildOperationList._get_count, doc="Gets the number of objects in the collection.")

ChildOperationList.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, ChildOperationList) else None
ChildOperationList.cast = lambda arg: arg if isinstance(arg, ChildOperationList) else None

class GenerateToolpathFuture(Base):
    """Used to check the state and get back the results of toolpath generation."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenerateToolpathFuture, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenerateToolpathFuture, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::GenerateToolpathFuture *" : return _cam.GenerateToolpathFuture___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.GenerateToolpathFuture___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.GenerateToolpathFuture___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.GenerateToolpathFuture_classType
    if _newclass:classType = staticmethod(_cam.GenerateToolpathFuture_classType)
    __swig_destroy__ = _cam.delete_GenerateToolpathFuture
    __del__ = lambda self : None;
    def _get_numberOfOperations(self) -> "int" :
        """Returns a number of operations need to be generated."""
        return _cam.GenerateToolpathFuture__get_numberOfOperations(self)

    def _get_numberOfCompleted(self) -> "int" :
        """Returns a number of operations whose toolpath generation are completed."""
        return _cam.GenerateToolpathFuture__get_numberOfCompleted(self)

    def _get_operations(self) -> "adsk::core::Ptr< adsk::cam::Operations >" :
        """Returns all operations that need to be generated."""
        return _cam.GenerateToolpathFuture__get_operations(self)

    def _get_isGenerationCompleted(self) -> "bool" :
        """Returns true if all operations are generated."""
        return _cam.GenerateToolpathFuture__get_isGenerationCompleted(self)

    def _get_objectType(self) -> "char const *" : return _cam.GenerateToolpathFuture__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.GenerateToolpathFuture__get_isValid(self)
GenerateToolpathFuture_swigregister = _cam.GenerateToolpathFuture_swigregister
GenerateToolpathFuture_swigregister(GenerateToolpathFuture)

def GenerateToolpathFuture_classType() -> "char const *" :
  return _cam.GenerateToolpathFuture_classType()
GenerateToolpathFuture_classType = _cam.GenerateToolpathFuture_classType

GenerateToolpathFuture.__swig_getmethods__["numberOfOperations"] = GenerateToolpathFuture._get_numberOfOperations
GenerateToolpathFuture.numberOfOperations = property(GenerateToolpathFuture._get_numberOfOperations, doc="Returns a number of operations need to be generated.")

GenerateToolpathFuture.__swig_getmethods__["numberOfCompleted"] = GenerateToolpathFuture._get_numberOfCompleted
GenerateToolpathFuture.numberOfCompleted = property(GenerateToolpathFuture._get_numberOfCompleted, doc="Returns a number of operations whose toolpath generation are completed.")

GenerateToolpathFuture.__swig_getmethods__["operations"] = GenerateToolpathFuture._get_operations
GenerateToolpathFuture.operations = property(GenerateToolpathFuture._get_operations, doc="Returns all operations that need to be generated.")

GenerateToolpathFuture.__swig_getmethods__["isGenerationCompleted"] = GenerateToolpathFuture._get_isGenerationCompleted
GenerateToolpathFuture.isGenerationCompleted = property(GenerateToolpathFuture._get_isGenerationCompleted, doc="Returns true if all operations are generated.")

GenerateToolpathFuture.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, GenerateToolpathFuture) else None
GenerateToolpathFuture.cast = lambda arg: arg if isinstance(arg, GenerateToolpathFuture) else None

class Machine(Base):
    """Object that represents an existing Machine."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::Machine *" : return _cam.Machine___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Machine___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Machine___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Machine_classType
    if _newclass:classType = staticmethod(_cam.Machine_classType)
    __swig_destroy__ = _cam.delete_Machine
    __del__ = lambda self : None;
    def _get_vendor(self) -> "std::string" :
        """Gets and sets the vendor name of the machine."""
        return _cam.Machine__get_vendor(self)

    def _set_vendor(self, *args) -> "bool" :
        """Gets and sets the vendor name of the machine."""
        return _cam.Machine__set_vendor(self, *args)

    def _get_model(self) -> "std::string" :
        """Gets and sets the model name of the machine."""
        return _cam.Machine__get_model(self)

    def _set_model(self, *args) -> "bool" :
        """Gets and sets the model name of the machine."""
        return _cam.Machine__set_model(self, *args)

    def _get_description(self) -> "std::string" :
        """Gets and sets the description of the machine."""
        return _cam.Machine__get_description(self)

    def _set_description(self, *args) -> "bool" :
        """Gets and sets the description of the machine."""
        return _cam.Machine__set_description(self, *args)

    def _get_id(self) -> "std::string" :
        """Gets the identifier of the machine."""
        return _cam.Machine__get_id(self)

    def _get_objectType(self) -> "char const *" : return _cam.Machine__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Machine__get_isValid(self)
Machine_swigregister = _cam.Machine_swigregister
Machine_swigregister(Machine)

def Machine_classType() -> "char const *" :
  return _cam.Machine_classType()
Machine_classType = _cam.Machine_classType

Machine.__swig_getmethods__["vendor"] = Machine._get_vendor
Machine.__swig_setmethods__["vendor"] = Machine._set_vendor
Machine.vendor = property(Machine._get_vendor, Machine._set_vendor, doc="Gets and sets the vendor name of the machine.")

Machine.__swig_getmethods__["model"] = Machine._get_model
Machine.__swig_setmethods__["model"] = Machine._set_model
Machine.model = property(Machine._get_model, Machine._set_model, doc="Gets and sets the model name of the machine.")

Machine.__swig_getmethods__["description"] = Machine._get_description
Machine.__swig_setmethods__["description"] = Machine._set_description
Machine.description = property(Machine._get_description, Machine._set_description, doc="Gets and sets the description of the machine.")

Machine.__swig_getmethods__["id"] = Machine._get_id
Machine.id = property(Machine._get_id, doc="Gets the identifier of the machine.")

Machine.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, Machine) else None
Machine.cast = lambda arg: arg if isinstance(arg, Machine) else None

class MachiningTime(Base):
    """
    Object returned when using the getMachiningTime method from the CAM class. 
    Use the properties on this object to get the machining time results.
    """
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MachiningTime, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MachiningTime, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::MachiningTime *" : return _cam.MachiningTime___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.MachiningTime___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.MachiningTime___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.MachiningTime_classType
    if _newclass:classType = staticmethod(_cam.MachiningTime_classType)
    __swig_destroy__ = _cam.delete_MachiningTime
    __del__ = lambda self : None;
    def _get_feedDistance(self) -> "double" :
        """Gets the feed distance in centimeters."""
        return _cam.MachiningTime__get_feedDistance(self)

    def _get_totalFeedTime(self) -> "double" :
        """Get the total feed time in seconds."""
        return _cam.MachiningTime__get_totalFeedTime(self)

    def _get_rapidDistance(self) -> "double" :
        """Gets the calculated rapid distance in centimeters."""
        return _cam.MachiningTime__get_rapidDistance(self)

    def _get_totalRapidTime(self) -> "double" :
        """Gets the total rapid feed time in seconds."""
        return _cam.MachiningTime__get_totalRapidTime(self)

    def _get_toolChangeCount(self) -> "int" :
        """Gets the number of tool changes."""
        return _cam.MachiningTime__get_toolChangeCount(self)

    def _get_totalToolChangeTime(self) -> "double" :
        """Gets the total tool change time in seconds."""
        return _cam.MachiningTime__get_totalToolChangeTime(self)

    def _get_machiningTime(self) -> "double" :
        """Gets the machining time in seconds."""
        return _cam.MachiningTime__get_machiningTime(self)

    def _get_objectType(self) -> "char const *" : return _cam.MachiningTime__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.MachiningTime__get_isValid(self)
MachiningTime_swigregister = _cam.MachiningTime_swigregister
MachiningTime_swigregister(MachiningTime)

def MachiningTime_classType() -> "char const *" :
  return _cam.MachiningTime_classType()
MachiningTime_classType = _cam.MachiningTime_classType

MachiningTime.__swig_getmethods__["feedDistance"] = MachiningTime._get_feedDistance
MachiningTime.feedDistance = property(MachiningTime._get_feedDistance, doc="Gets the feed distance in centimeters.")

MachiningTime.__swig_getmethods__["totalFeedTime"] = MachiningTime._get_totalFeedTime
MachiningTime.totalFeedTime = property(MachiningTime._get_totalFeedTime, doc="Get the total feed time in seconds.")

MachiningTime.__swig_getmethods__["rapidDistance"] = MachiningTime._get_rapidDistance
MachiningTime.rapidDistance = property(MachiningTime._get_rapidDistance, doc="Gets the calculated rapid distance in centimeters.")

MachiningTime.__swig_getmethods__["totalRapidTime"] = MachiningTime._get_totalRapidTime
MachiningTime.totalRapidTime = property(MachiningTime._get_totalRapidTime, doc="Gets the total rapid feed time in seconds.")

MachiningTime.__swig_getmethods__["toolChangeCount"] = MachiningTime._get_toolChangeCount
MachiningTime.toolChangeCount = property(MachiningTime._get_toolChangeCount, doc="Gets the number of tool changes.")

MachiningTime.__swig_getmethods__["totalToolChangeTime"] = MachiningTime._get_totalToolChangeTime
MachiningTime.totalToolChangeTime = property(MachiningTime._get_totalToolChangeTime, doc="Gets the total tool change time in seconds.")

MachiningTime.__swig_getmethods__["machiningTime"] = MachiningTime._get_machiningTime
MachiningTime.machiningTime = property(MachiningTime._get_machiningTime, doc="Gets the machining time in seconds.")

MachiningTime.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, MachiningTime) else None
MachiningTime.cast = lambda arg: arg if isinstance(arg, MachiningTime) else None

class OperationBase(Base):
    """Base class object representing all operations, folders, patterns and setups."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::OperationBase *" : return _cam.OperationBase___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.OperationBase___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.OperationBase___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.OperationBase_classType
    if _newclass:classType = staticmethod(_cam.OperationBase_classType)
    __swig_destroy__ = _cam.delete_OperationBase
    __del__ = lambda self : None;
    def _get_name(self) -> "std::string" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.OperationBase__get_name(self)

    def _set_name(self, *args) -> "bool" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.OperationBase__set_name(self, *args)

    def _get_isProtected(self) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.OperationBase__get_isProtected(self)

    def _set_isProtected(self, *args) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.OperationBase__set_isProtected(self, *args)

    def _get_isOptional(self) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.OperationBase__get_isOptional(self)

    def _set_isOptional(self, *args) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.OperationBase__set_isOptional(self, *args)

    def _get_isSuppressed(self) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.OperationBase__get_isSuppressed(self)

    def _set_isSuppressed(self, *args) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.OperationBase__set_isSuppressed(self, *args)

    def _get_parentSetup(self) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """Gets the Setup this operation belongs to."""
        return _cam.OperationBase__get_parentSetup(self)

    def _get_isSelected(self) -> "bool" :
        """Gets if this operation is selected in the 'Setups' browser."""
        return _cam.OperationBase__get_isSelected(self)

    def _get_notes(self) -> "std::string" :
        """Gets and sets the notes of the operation."""
        return _cam.OperationBase__get_notes(self)

    def _set_notes(self, *args) -> "bool" :
        """Gets and sets the notes of the operation."""
        return _cam.OperationBase__set_notes(self, *args)

    def _get_operationId(self) -> "int" :
        """
        Returns the id of the operation. This id is unique as compared 
        to the ids of all other operations in the document. 
        This id will not change when changing the order or parent of the operation. 
        This id will remain valid when the document is saved and reloaded.
        """
        return _cam.OperationBase__get_operationId(self)

    def _get_parameters(self) -> "adsk::core::Ptr< adsk::cam::CAMParameters >" :
        """Gets the CAMParameters collection for this operation."""
        return _cam.OperationBase__get_parameters(self)

    def _get_objectType(self) -> "char const *" : return _cam.OperationBase__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.OperationBase__get_isValid(self)
OperationBase_swigregister = _cam.OperationBase_swigregister
OperationBase_swigregister(OperationBase)

def OperationBase_classType() -> "char const *" :
  return _cam.OperationBase_classType()
OperationBase_classType = _cam.OperationBase_classType

OperationBase.__swig_getmethods__["name"] = OperationBase._get_name
OperationBase.__swig_setmethods__["name"] = OperationBase._set_name
OperationBase.name = property(OperationBase._get_name, OperationBase._set_name, doc="Gets and sets the name of the operation as seen in the browser. This name is unique as compared\nto the names of all other operations in the document.")

OperationBase.__swig_getmethods__["isProtected"] = OperationBase._get_isProtected
OperationBase.__swig_setmethods__["isProtected"] = OperationBase._set_isProtected
OperationBase.isProtected = property(OperationBase._get_isProtected, OperationBase._set_isProtected, doc="Gets and sets the 'protected' property value of the operation.\nGets/sets true if the operation is protected.")

OperationBase.__swig_getmethods__["isOptional"] = OperationBase._get_isOptional
OperationBase.__swig_setmethods__["isOptional"] = OperationBase._set_isOptional
OperationBase.isOptional = property(OperationBase._get_isOptional, OperationBase._set_isOptional, doc="Gets and sets the 'Optional' property value of the operation.\nGets/sets true if the operation is optional.")

OperationBase.__swig_getmethods__["isSuppressed"] = OperationBase._get_isSuppressed
OperationBase.__swig_setmethods__["isSuppressed"] = OperationBase._set_isSuppressed
OperationBase.isSuppressed = property(OperationBase._get_isSuppressed, OperationBase._set_isSuppressed, doc="Gets and sets the 'Suppressed' property value of the operation.\nGets/sets true if the operation is suppressed.")

OperationBase.__swig_getmethods__["parentSetup"] = OperationBase._get_parentSetup
OperationBase.parentSetup = property(OperationBase._get_parentSetup, doc="Gets the Setup this operation belongs to.")

OperationBase.__swig_getmethods__["isSelected"] = OperationBase._get_isSelected
OperationBase.isSelected = property(OperationBase._get_isSelected, doc="Gets if this operation is selected in the 'Setups' browser.")

OperationBase.__swig_getmethods__["notes"] = OperationBase._get_notes
OperationBase.__swig_setmethods__["notes"] = OperationBase._set_notes
OperationBase.notes = property(OperationBase._get_notes, OperationBase._set_notes, doc="Gets and sets the notes of the operation.")

OperationBase.__swig_getmethods__["operationId"] = OperationBase._get_operationId
OperationBase.operationId = property(OperationBase._get_operationId, doc="Returns the id of the operation. This id is unique as compared\nto the ids of all other operations in the document.\nThis id will not change when changing the order or parent of the operation.\nThis id will remain valid when the document is saved and reloaded.")

OperationBase.__swig_getmethods__["parameters"] = OperationBase._get_parameters
OperationBase.parameters = property(OperationBase._get_parameters, doc="Gets the CAMParameters collection for this operation.")

OperationBase.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, OperationBase) else None
OperationBase.cast = lambda arg: arg if isinstance(arg, OperationBase) else None

class Operations(Base):
    """Collection that provides access to the individual operations within an existing setup, folder or pattern."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operations, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Operations, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::Operations *" : return _cam.Operations___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Operations___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Operations___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.Operations___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::cam::Operation >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.Operations___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Operations_classType
    if _newclass:classType = staticmethod(_cam.Operations_classType)
    __swig_destroy__ = _cam.delete_Operations
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::cam::Operation >" :
        """
        Function that returns the specified operation using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.Operations_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::cam::Operation >" :
        """
        Returns the operation with the specified name (as appears in the browser). 
        name : The name (as it appears in the browser) of the operation. 
        Returns the specified operation or null in the case where there is no operation with the specified name.
        """
        return _cam.Operations_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """The number of items in the collection."""
        return _cam.Operations__get_count(self)

    def itemByOperationId(self, *args) -> "adsk::core::Ptr< adsk::cam::Operation >" :
        """
        Returns the operation with the specified operation id. 
        id : The id of the operation. 
        Returns the specified operation or null in the case where there is no operation with the specified operation id.
        """
        return _cam.Operations_itemByOperationId(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.Operations__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Operations__get_isValid(self)
Operations_swigregister = _cam.Operations_swigregister
Operations_swigregister(Operations)

def Operations_classType() -> "char const *" :
  return _cam.Operations_classType()
Operations_classType = _cam.Operations_classType

Operations.__swig_getmethods__["count"] = Operations._get_count
Operations.count = property(Operations._get_count, doc="The number of items in the collection.")

Operations.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, Operations) else None
Operations.cast = lambda arg: arg if isinstance(arg, Operations) else None

class PostProcessInput(Base):
    """
    This class defines the properties that pertain to the settings and options required for posting a 
    toolpath to generate a CNC file. A PostProcessInput object is a required parameter for the 
    postProcessAll() and postProcess() methods on the CAM class.
    """
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PostProcessInput, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PostProcessInput, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::PostProcessInput *" : return _cam.PostProcessInput___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.PostProcessInput___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.PostProcessInput___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.PostProcessInput_classType
    if _newclass:classType = staticmethod(_cam.PostProcessInput_classType)
    __swig_getmethods__["create"] = lambda x: _cam.PostProcessInput_create
    if _newclass:create = staticmethod(_cam.PostProcessInput_create)
    __swig_destroy__ = _cam.delete_PostProcessInput
    __del__ = lambda self : None;
    def _get_programName(self) -> "std::string" :
        """
        Gets and sets the program name or number. 
        If the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.
        """
        return _cam.PostProcessInput__get_programName(self)

    def _set_programName(self, *args) -> "bool" :
        """
        Gets and sets the program name or number. 
        If the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.
        """
        return _cam.PostProcessInput__set_programName(self, *args)

    def _get_programComment(self) -> "std::string" :
        """Gets and sets the program comment. The default value for this property is an empty string ('')."""
        return _cam.PostProcessInput__get_programComment(self)

    def _set_programComment(self, *args) -> "bool" :
        """Gets and sets the program comment. The default value for this property is an empty string ('')."""
        return _cam.PostProcessInput__set_programComment(self, *args)

    def _get_postConfiguration(self) -> "std::string" :
        """Gets and sets the full filename (including the path) for the post configuration file (.cps)"""
        return _cam.PostProcessInput__get_postConfiguration(self)

    def _set_postConfiguration(self, *args) -> "bool" :
        """Gets and sets the full filename (including the path) for the post configuration file (.cps)"""
        return _cam.PostProcessInput__set_postConfiguration(self, *args)

    def _get_outputFolder(self) -> "std::string" :
        """Gets and sets the path for the output folder where the .cnc files will be located."""
        return _cam.PostProcessInput__get_outputFolder(self)

    def _set_outputFolder(self, *args) -> "bool" :
        """Gets and sets the path for the output folder where the .cnc files will be located."""
        return _cam.PostProcessInput__set_outputFolder(self, *args)

    def _get_outputUnits(self) -> "adsk::cam::PostOutputUnitOptions" :
        """
        Gets and sets the units option for the cnc output. 
        Valid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput
        """
        return _cam.PostProcessInput__get_outputUnits(self)

    def _set_outputUnits(self, *args) -> "bool" :
        """
        Gets and sets the units option for the cnc output. 
        Valid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput
        """
        return _cam.PostProcessInput__set_outputUnits(self, *args)

    def _get_isOpenInEditor(self) -> "bool" :
        """
        Gets and sets the option if opening the cnc file with the editor after it is created.
        The default value for this property is true.
        """
        return _cam.PostProcessInput__get_isOpenInEditor(self)

    def _set_isOpenInEditor(self, *args) -> "bool" :
        """
        Gets and sets the option if opening the cnc file with the editor after it is created.
        The default value for this property is true.
        """
        return _cam.PostProcessInput__set_isOpenInEditor(self, *args)

    def _get_areToolChangesMinimized(self) -> "bool" :
        """
        Gets and sets that operations may be reordered between setups to minimize the number of tool changes.
        Operations within each setup will still be executed in the programmed order.
        This is commonly used for tombstone machining where you have multiple setups.
        The default value for this property is false.
        """
        return _cam.PostProcessInput__get_areToolChangesMinimized(self)

    def _set_areToolChangesMinimized(self, *args) -> "bool" :
        """
        Gets and sets that operations may be reordered between setups to minimize the number of tool changes.
        Operations within each setup will still be executed in the programmed order.
        This is commonly used for tombstone machining where you have multiple setups.
        The default value for this property is false.
        """
        return _cam.PostProcessInput__set_areToolChangesMinimized(self, *args)

    def _get_postProperties(self) -> "adsk::core::Ptr< adsk::core::NamedValues >" :
        """
        Gets and sets the list of post properties. 
        Each property has a string name and a ValueInput object.
        The default value for this is an empty NamedValues.
        """
        return _cam.PostProcessInput__get_postProperties(self)

    def _set_postProperties(self, *args) -> "bool" :
        """
        Gets and sets the list of post properties. 
        Each property has a string name and a ValueInput object.
        The default value for this is an empty NamedValues.
        """
        return _cam.PostProcessInput__set_postProperties(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.PostProcessInput__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.PostProcessInput__get_isValid(self)
PostProcessInput_swigregister = _cam.PostProcessInput_swigregister
PostProcessInput_swigregister(PostProcessInput)

def PostProcessInput_classType() -> "char const *" :
  return _cam.PostProcessInput_classType()
PostProcessInput_classType = _cam.PostProcessInput_classType

def PostProcessInput_create(*args) -> "adsk::core::Ptr< adsk::cam::PostProcessInput >" :
  return _cam.PostProcessInput_create(*args)
PostProcessInput_create = _cam.PostProcessInput_create

PostProcessInput.__swig_getmethods__["programName"] = PostProcessInput._get_programName
PostProcessInput.__swig_setmethods__["programName"] = PostProcessInput._set_programName
PostProcessInput.programName = property(PostProcessInput._get_programName, PostProcessInput._set_programName, doc="Gets and sets the program name or number.\nIf the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.")

PostProcessInput.__swig_getmethods__["programComment"] = PostProcessInput._get_programComment
PostProcessInput.__swig_setmethods__["programComment"] = PostProcessInput._set_programComment
PostProcessInput.programComment = property(PostProcessInput._get_programComment, PostProcessInput._set_programComment, doc="Gets and sets the program comment. The default value for this property is an empty string ('').")

PostProcessInput.__swig_getmethods__["postConfiguration"] = PostProcessInput._get_postConfiguration
PostProcessInput.__swig_setmethods__["postConfiguration"] = PostProcessInput._set_postConfiguration
PostProcessInput.postConfiguration = property(PostProcessInput._get_postConfiguration, PostProcessInput._set_postConfiguration, doc="Gets and sets the full filename (including the path) for the post configuration file (.cps)")

PostProcessInput.__swig_getmethods__["outputFolder"] = PostProcessInput._get_outputFolder
PostProcessInput.__swig_setmethods__["outputFolder"] = PostProcessInput._set_outputFolder
PostProcessInput.outputFolder = property(PostProcessInput._get_outputFolder, PostProcessInput._set_outputFolder, doc="Gets and sets the path for the output folder where the .cnc files will be located.")

PostProcessInput.__swig_getmethods__["outputUnits"] = PostProcessInput._get_outputUnits
PostProcessInput.__swig_setmethods__["outputUnits"] = PostProcessInput._set_outputUnits
PostProcessInput.outputUnits = property(PostProcessInput._get_outputUnits, PostProcessInput._set_outputUnits, doc="Gets and sets the units option for the cnc output.\nValid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput")

PostProcessInput.__swig_getmethods__["isOpenInEditor"] = PostProcessInput._get_isOpenInEditor
PostProcessInput.__swig_setmethods__["isOpenInEditor"] = PostProcessInput._set_isOpenInEditor
PostProcessInput.isOpenInEditor = property(PostProcessInput._get_isOpenInEditor, PostProcessInput._set_isOpenInEditor, doc="Gets and sets the option if opening the cnc file with the editor after it is created.\nThe default value for this property is true.")

PostProcessInput.__swig_getmethods__["areToolChangesMinimized"] = PostProcessInput._get_areToolChangesMinimized
PostProcessInput.__swig_setmethods__["areToolChangesMinimized"] = PostProcessInput._set_areToolChangesMinimized
PostProcessInput.areToolChangesMinimized = property(PostProcessInput._get_areToolChangesMinimized, PostProcessInput._set_areToolChangesMinimized, doc="Gets and sets that operations may be reordered between setups to minimize the number of tool changes.\nOperations within each setup will still be executed in the programmed order.\nThis is commonly used for tombstone machining where you have multiple setups.\nThe default value for this property is false.")

PostProcessInput.__swig_getmethods__["postProperties"] = PostProcessInput._get_postProperties
PostProcessInput.__swig_setmethods__["postProperties"] = PostProcessInput._set_postProperties
PostProcessInput.postProperties = property(PostProcessInput._get_postProperties, PostProcessInput._set_postProperties, doc="Gets and sets the list of post properties.\nEach property has a string name and a ValueInput object.\nThe default value for this is an empty NamedValues.")

PostProcessInput.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, PostProcessInput) else None
PostProcessInput.cast = lambda arg: arg if isinstance(arg, PostProcessInput) else None

class Setups(Base):
    """Collection that provides access to all of the existing setups in a document."""
    __swig_setmethods__ = {}
    for _s in [Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Setups, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Setups, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::Setups *" : return _cam.Setups___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Setups___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Setups___ne__(self, *args)

    def __len__(self) -> "size_t" : return _cam.Setups___len__(self)
    def __getitem__(self, *args) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        if isinstance(args[0], slice):
            return [self[ii] for ii in range(*args[0].indices(len(self)))]
        if args[0] < 0:
            args = ((args[0] + len(self)),) + args[1:]
        if args[0] < 0 or args[0] >= len(self):
            raise IndexError("The index (%d) is out of range." % args[0])


        return _cam.Setups___getitem__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Setups_classType
    if _newclass:classType = staticmethod(_cam.Setups_classType)
    __swig_destroy__ = _cam.delete_Setups
    __del__ = lambda self : None;
    def item(self, *args) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """
        Function that returns the specified setup using an index into the collection. 
        index : The index of the item within the collection to return. The first item in the collection has an index of 0. 
        Returns the specified item or null if an invalid index was specified.
        """
        return _cam.Setups_item(self, *args)

    def itemByName(self, *args) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """
        Returns the setup with the specified name. 
        name : The name (as it appears in the browser) of the operation. 
        Returns the specified setup or null in the case where there is no setup with the specified name.
        """
        return _cam.Setups_itemByName(self, *args)

    def _get_count(self) -> "size_t" :
        """The number of setups in the collection."""
        return _cam.Setups__get_count(self)

    def itemByOperationId(self, *args) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """
        Returns the setup with the specified operation id. 
        id : The id of the operation. 
        Returns the specified setup or null in the case where there is no setup with the specified operation id.
        """
        return _cam.Setups_itemByOperationId(self, *args)

    def _get_objectType(self) -> "char const *" : return _cam.Setups__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Setups__get_isValid(self)
Setups_swigregister = _cam.Setups_swigregister
Setups_swigregister(Setups)

def Setups_classType() -> "char const *" :
  return _cam.Setups_classType()
Setups_classType = _cam.Setups_classType

Setups.__swig_getmethods__["count"] = Setups._get_count
Setups.count = property(Setups._get_count, doc="The number of setups in the collection.")

Setups.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, Setups) else None
Setups.cast = lambda arg: arg if isinstance(arg, Setups) else None

class CAMFolder(OperationBase):
    """Object that represents a folder in an existing Setup, Folder or Pattern."""
    __swig_setmethods__ = {}
    for _s in [OperationBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMFolder, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMFolder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMFolder *" : return _cam.CAMFolder___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMFolder___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMFolder___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMFolder_classType
    if _newclass:classType = staticmethod(_cam.CAMFolder_classType)
    __swig_destroy__ = _cam.delete_CAMFolder
    __del__ = lambda self : None;
    def _get_isActive(self) -> "bool" :
        """Gets if this folder is active."""
        return _cam.CAMFolder__get_isActive(self)

    def _get_operations(self) -> "adsk::core::Ptr< adsk::cam::Operations >" :
        """
        Returns the Operations collection that provides access to existing individual operations 
        in this folder.
        """
        return _cam.CAMFolder__get_operations(self)

    def _get_folders(self) -> "adsk::core::Ptr< adsk::cam::CAMFolders >" :
        """
        Returns the Folders collection that provides access to existing folders 
        in this folder.
        """
        return _cam.CAMFolder__get_folders(self)

    def _get_patterns(self) -> "adsk::core::Ptr< adsk::cam::CAMPatterns >" :
        """
        Returns the Patterns collection that provides access to existing patterns 
        in this folder.
        """
        return _cam.CAMFolder__get_patterns(self)

    def _get_children(self) -> "adsk::core::Ptr< adsk::cam::ChildOperationList >" :
        """
        Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this folder
        in the order they appear in the browser.
        """
        return _cam.CAMFolder__get_children(self)

    def _get_parent(self) -> "adsk::core::Ptr< adsk::core::Base >" :
        """Returns the parent Setup, Folder or Pattern for this Folder."""
        return _cam.CAMFolder__get_parent(self)

    def _get_allOperations(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Gets a collection containing all of the operations in this folder. 
        This includes all operations nested in folders and patterns.
        """
        return _cam.CAMFolder__get_allOperations(self)

    def createFromTemplate(self, *args) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Create and add operations, folders or patterns from the specified template file to the end of this folder. 
        templateFilePath : The full path to the template file. 
        Returns the collection containing all of the operations, folders and patterns created from the template file.
        """
        return _cam.CAMFolder_createFromTemplate(self, *args)

    def _get_name(self) -> "std::string" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.CAMFolder__get_name(self)

    def _set_name(self, *args) -> "bool" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.CAMFolder__set_name(self, *args)

    def _get_isProtected(self) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.CAMFolder__get_isProtected(self)

    def _set_isProtected(self, *args) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.CAMFolder__set_isProtected(self, *args)

    def _get_isOptional(self) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.CAMFolder__get_isOptional(self)

    def _set_isOptional(self, *args) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.CAMFolder__set_isOptional(self, *args)

    def _get_isSuppressed(self) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.CAMFolder__get_isSuppressed(self)

    def _set_isSuppressed(self, *args) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.CAMFolder__set_isSuppressed(self, *args)

    def _get_parentSetup(self) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """Gets the Setup this operation belongs to."""
        return _cam.CAMFolder__get_parentSetup(self)

    def _get_isSelected(self) -> "bool" :
        """Gets if this operation is selected in the 'Setups' browser."""
        return _cam.CAMFolder__get_isSelected(self)

    def _get_notes(self) -> "std::string" :
        """Gets and sets the notes of the operation."""
        return _cam.CAMFolder__get_notes(self)

    def _set_notes(self, *args) -> "bool" :
        """Gets and sets the notes of the operation."""
        return _cam.CAMFolder__set_notes(self, *args)

    def _get_operationId(self) -> "int" :
        """
        Returns the id of the operation. This id is unique as compared 
        to the ids of all other operations in the document. 
        This id will not change when changing the order or parent of the operation. 
        This id will remain valid when the document is saved and reloaded.
        """
        return _cam.CAMFolder__get_operationId(self)

    def _get_parameters(self) -> "adsk::core::Ptr< adsk::cam::CAMParameters >" :
        """Gets the CAMParameters collection for this operation."""
        return _cam.CAMFolder__get_parameters(self)

    def _get_objectType(self) -> "char const *" : return _cam.CAMFolder__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMFolder__get_isValid(self)
CAMFolder_swigregister = _cam.CAMFolder_swigregister
CAMFolder_swigregister(CAMFolder)

def CAMFolder_classType() -> "char const *" :
  return _cam.CAMFolder_classType()
CAMFolder_classType = _cam.CAMFolder_classType

CAMFolder.__swig_getmethods__["isActive"] = CAMFolder._get_isActive
CAMFolder.isActive = property(CAMFolder._get_isActive, doc="Gets if this folder is active.")

CAMFolder.__swig_getmethods__["operations"] = CAMFolder._get_operations
CAMFolder.operations = property(CAMFolder._get_operations, doc="Returns the Operations collection that provides access to existing individual operations\nin this folder.")

CAMFolder.__swig_getmethods__["folders"] = CAMFolder._get_folders
CAMFolder.folders = property(CAMFolder._get_folders, doc="Returns the Folders collection that provides access to existing folders\nin this folder.")

CAMFolder.__swig_getmethods__["patterns"] = CAMFolder._get_patterns
CAMFolder.patterns = property(CAMFolder._get_patterns, doc="Returns the Patterns collection that provides access to existing patterns\nin this folder.")

CAMFolder.__swig_getmethods__["children"] = CAMFolder._get_children
CAMFolder.children = property(CAMFolder._get_children, doc="Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this folder\nin the order they appear in the browser.")

CAMFolder.__swig_getmethods__["parent"] = CAMFolder._get_parent
CAMFolder.parent = property(CAMFolder._get_parent, doc="Returns the parent Setup, Folder or Pattern for this Folder.")

CAMFolder.__swig_getmethods__["allOperations"] = CAMFolder._get_allOperations
CAMFolder.allOperations = property(CAMFolder._get_allOperations, doc="Gets a collection containing all of the operations in this folder.\nThis includes all operations nested in folders and patterns.")

CAMFolder.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMFolder) else None
CAMFolder.cast = lambda arg: arg if isinstance(arg, CAMFolder) else None

class Operation(OperationBase):
    """Object that represents an operation in an existing Setup, Folder or Pattern."""
    __swig_setmethods__ = {}
    for _s in [OperationBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operation, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Operation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::Operation *" : return _cam.Operation___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Operation___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Operation___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Operation_classType
    if _newclass:classType = staticmethod(_cam.Operation_classType)
    __swig_destroy__ = _cam.delete_Operation
    __del__ = lambda self : None;
    def _get_strategyType(self) -> "adsk::cam::OperationStrategyTypes" :
        """Gets the strategy type for this operation."""
        return _cam.Operation__get_strategyType(self)

    def _get_isToolpathValid(self) -> "bool" :
        """Gets if the toolpath for this operation is currently valid. (has not become invalidated by model changes)."""
        return _cam.Operation__get_isToolpathValid(self)

    def _get_isGenerating(self) -> "bool" :
        """Gets if the toolpath is in the process of generating."""
        return _cam.Operation__get_isGenerating(self)

    def _get_hasWarning(self) -> "bool" :
        """Gets if problems were encountered when generating the toolpath for this operation."""
        return _cam.Operation__get_hasWarning(self)

    def _get_parent(self) -> "adsk::core::Ptr< adsk::core::Base >" :
        """Returns the parent Setup, Folder or Pattern for this operation."""
        return _cam.Operation__get_parent(self)

    def _get_hasToolpath(self) -> "bool" :
        """Gets if a toolpath currently exists (has been generated) for this operation."""
        return _cam.Operation__get_hasToolpath(self)

    def _get_operationState(self) -> "adsk::cam::OperationStates" :
        """Gets the current state of this operation."""
        return _cam.Operation__get_operationState(self)

    def _get_generatingProgress(self) -> "std::string" :
        """Gets the toolpath generation progress value for this operation."""
        return _cam.Operation__get_generatingProgress(self)

    def _get_name(self) -> "std::string" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.Operation__get_name(self)

    def _set_name(self, *args) -> "bool" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.Operation__set_name(self, *args)

    def _get_isProtected(self) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.Operation__get_isProtected(self)

    def _set_isProtected(self, *args) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.Operation__set_isProtected(self, *args)

    def _get_isOptional(self) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.Operation__get_isOptional(self)

    def _set_isOptional(self, *args) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.Operation__set_isOptional(self, *args)

    def _get_isSuppressed(self) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.Operation__get_isSuppressed(self)

    def _set_isSuppressed(self, *args) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.Operation__set_isSuppressed(self, *args)

    def _get_parentSetup(self) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """Gets the Setup this operation belongs to."""
        return _cam.Operation__get_parentSetup(self)

    def _get_isSelected(self) -> "bool" :
        """Gets if this operation is selected in the 'Setups' browser."""
        return _cam.Operation__get_isSelected(self)

    def _get_notes(self) -> "std::string" :
        """Gets and sets the notes of the operation."""
        return _cam.Operation__get_notes(self)

    def _set_notes(self, *args) -> "bool" :
        """Gets and sets the notes of the operation."""
        return _cam.Operation__set_notes(self, *args)

    def _get_operationId(self) -> "int" :
        """
        Returns the id of the operation. This id is unique as compared 
        to the ids of all other operations in the document. 
        This id will not change when changing the order or parent of the operation. 
        This id will remain valid when the document is saved and reloaded.
        """
        return _cam.Operation__get_operationId(self)

    def _get_parameters(self) -> "adsk::core::Ptr< adsk::cam::CAMParameters >" :
        """Gets the CAMParameters collection for this operation."""
        return _cam.Operation__get_parameters(self)

    def _get_objectType(self) -> "char const *" : return _cam.Operation__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Operation__get_isValid(self)
Operation_swigregister = _cam.Operation_swigregister
Operation_swigregister(Operation)

def Operation_classType() -> "char const *" :
  return _cam.Operation_classType()
Operation_classType = _cam.Operation_classType

Operation.__swig_getmethods__["strategyType"] = Operation._get_strategyType
Operation.strategyType = property(Operation._get_strategyType, doc="Gets the strategy type for this operation.")

Operation.__swig_getmethods__["isToolpathValid"] = Operation._get_isToolpathValid
Operation.isToolpathValid = property(Operation._get_isToolpathValid, doc="Gets if the toolpath for this operation is currently valid. (has not become invalidated by model changes).")

Operation.__swig_getmethods__["isGenerating"] = Operation._get_isGenerating
Operation.isGenerating = property(Operation._get_isGenerating, doc="Gets if the toolpath is in the process of generating.")

Operation.__swig_getmethods__["hasWarning"] = Operation._get_hasWarning
Operation.hasWarning = property(Operation._get_hasWarning, doc="Gets if problems were encountered when generating the toolpath for this operation.")

Operation.__swig_getmethods__["parent"] = Operation._get_parent
Operation.parent = property(Operation._get_parent, doc="Returns the parent Setup, Folder or Pattern for this operation.")

Operation.__swig_getmethods__["hasToolpath"] = Operation._get_hasToolpath
Operation.hasToolpath = property(Operation._get_hasToolpath, doc="Gets if a toolpath currently exists (has been generated) for this operation.")

Operation.__swig_getmethods__["operationState"] = Operation._get_operationState
Operation.operationState = property(Operation._get_operationState, doc="Gets the current state of this operation.")

Operation.__swig_getmethods__["generatingProgress"] = Operation._get_generatingProgress
Operation.generatingProgress = property(Operation._get_generatingProgress, doc="Gets the toolpath generation progress value for this operation.")

Operation.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, Operation) else None
Operation.cast = lambda arg: arg if isinstance(arg, Operation) else None

class Setup(OperationBase):
    """Object that represents an existing Setup."""
    __swig_setmethods__ = {}
    for _s in [OperationBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Setup, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Setup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::Setup *" : return _cam.Setup___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.Setup___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.Setup___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.Setup_classType
    if _newclass:classType = staticmethod(_cam.Setup_classType)
    __swig_destroy__ = _cam.delete_Setup
    __del__ = lambda self : None;
    def _get_operationType(self) -> "adsk::cam::OperationTypes" :
        """Gets the Operation Type (MillingOperation or TurningOperation)."""
        return _cam.Setup__get_operationType(self)

    def _get_isActive(self) -> "bool" :
        """Gets if this setup is active."""
        return _cam.Setup__get_isActive(self)

    def _get_operations(self) -> "adsk::core::Ptr< adsk::cam::Operations >" :
        """
        Returns the Operations collection that provides access to existing operations 
        in this setup.
        """
        return _cam.Setup__get_operations(self)

    def _get_folders(self) -> "adsk::core::Ptr< adsk::cam::CAMFolders >" :
        """
        Returns the Folders collection that provides access to existing folders 
        in this setup.
        """
        return _cam.Setup__get_folders(self)

    def _get_patterns(self) -> "adsk::core::Ptr< adsk::cam::CAMPatterns >" :
        """
        Returns the Patterns collection that provides access to existing patterns 
        in this setup.
        """
        return _cam.Setup__get_patterns(self)

    def _get_children(self) -> "adsk::core::Ptr< adsk::cam::ChildOperationList >" :
        """
        Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this setup 
        in the order they appear in the browser.
        """
        return _cam.Setup__get_children(self)

    def _get_allOperations(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Gets a collection containing all of the operations in this setup. 
        This includes all operations nested in folders and patterns.
        """
        return _cam.Setup__get_allOperations(self)

    def _get_models(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Gets and sets the bodies associated with the setup. Passing in an empty ObjectCollection
        will remove all current bodies. Valid input is MeshBody and/or BRepBody objects.
        """
        return _cam.Setup__get_models(self)

    def _set_models(self, *args) -> "bool" :
        """
        Gets and sets the bodies associated with the setup. Passing in an empty ObjectCollection
        will remove all current bodies. Valid input is MeshBody and/or BRepBody objects.
        """
        return _cam.Setup__set_models(self, *args)

    def _get_fixtures(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """Gets the fixtures associated with the setup."""
        return _cam.Setup__get_fixtures(self)

    def _get_stockSolids(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """Gets the stock solids associated with the setup."""
        return _cam.Setup__get_stockSolids(self)

    def _get_machine(self) -> "adsk::core::Ptr< adsk::cam::Machine >" :
        """Gets the Machine associated with the setup."""
        return _cam.Setup__get_machine(self)

    def createFromTemplate(self, *args) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Create and add operations, folders or patterns from the specified template file to the end of this setup. 
        templateFilePath : The full path to the template file. 
        Returns the collection containing all of the operations, folders and patterns created from the template file.
        """
        return _cam.Setup_createFromTemplate(self, *args)

    def _get_name(self) -> "std::string" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.Setup__get_name(self)

    def _set_name(self, *args) -> "bool" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.Setup__set_name(self, *args)

    def _get_isProtected(self) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.Setup__get_isProtected(self)

    def _set_isProtected(self, *args) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.Setup__set_isProtected(self, *args)

    def _get_isOptional(self) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.Setup__get_isOptional(self)

    def _set_isOptional(self, *args) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.Setup__set_isOptional(self, *args)

    def _get_isSuppressed(self) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.Setup__get_isSuppressed(self)

    def _set_isSuppressed(self, *args) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.Setup__set_isSuppressed(self, *args)

    def _get_parentSetup(self) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """Gets the Setup this operation belongs to."""
        return _cam.Setup__get_parentSetup(self)

    def _get_isSelected(self) -> "bool" :
        """Gets if this operation is selected in the 'Setups' browser."""
        return _cam.Setup__get_isSelected(self)

    def _get_notes(self) -> "std::string" :
        """Gets and sets the notes of the operation."""
        return _cam.Setup__get_notes(self)

    def _set_notes(self, *args) -> "bool" :
        """Gets and sets the notes of the operation."""
        return _cam.Setup__set_notes(self, *args)

    def _get_operationId(self) -> "int" :
        """
        Returns the id of the operation. This id is unique as compared 
        to the ids of all other operations in the document. 
        This id will not change when changing the order or parent of the operation. 
        This id will remain valid when the document is saved and reloaded.
        """
        return _cam.Setup__get_operationId(self)

    def _get_parameters(self) -> "adsk::core::Ptr< adsk::cam::CAMParameters >" :
        """Gets the CAMParameters collection for this operation."""
        return _cam.Setup__get_parameters(self)

    def _get_objectType(self) -> "char const *" : return _cam.Setup__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.Setup__get_isValid(self)
Setup_swigregister = _cam.Setup_swigregister
Setup_swigregister(Setup)

def Setup_classType() -> "char const *" :
  return _cam.Setup_classType()
Setup_classType = _cam.Setup_classType

Setup.__swig_getmethods__["operationType"] = Setup._get_operationType
Setup.operationType = property(Setup._get_operationType, doc="Gets the Operation Type (MillingOperation or TurningOperation).")

Setup.__swig_getmethods__["isActive"] = Setup._get_isActive
Setup.isActive = property(Setup._get_isActive, doc="Gets if this setup is active.")

Setup.__swig_getmethods__["operations"] = Setup._get_operations
Setup.operations = property(Setup._get_operations, doc="Returns the Operations collection that provides access to existing operations\nin this setup.")

Setup.__swig_getmethods__["folders"] = Setup._get_folders
Setup.folders = property(Setup._get_folders, doc="Returns the Folders collection that provides access to existing folders\nin this setup.")

Setup.__swig_getmethods__["patterns"] = Setup._get_patterns
Setup.patterns = property(Setup._get_patterns, doc="Returns the Patterns collection that provides access to existing patterns\nin this setup.")

Setup.__swig_getmethods__["children"] = Setup._get_children
Setup.children = property(Setup._get_children, doc="Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this setup\nin the order they appear in the browser.")

Setup.__swig_getmethods__["allOperations"] = Setup._get_allOperations
Setup.allOperations = property(Setup._get_allOperations, doc="Gets a collection containing all of the operations in this setup.\nThis includes all operations nested in folders and patterns.")

Setup.__swig_getmethods__["models"] = Setup._get_models
Setup.__swig_setmethods__["models"] = Setup._set_models
Setup.models = property(Setup._get_models, Setup._set_models, doc="Gets and sets the bodies associated with the setup. Passing in an empty ObjectCollection\nwill remove all current bodies. Valid input is MeshBody and/or BRepBody objects.")

Setup.__swig_getmethods__["fixtures"] = Setup._get_fixtures
Setup.fixtures = property(Setup._get_fixtures, doc="Gets the fixtures associated with the setup.")

Setup.__swig_getmethods__["stockSolids"] = Setup._get_stockSolids
Setup.stockSolids = property(Setup._get_stockSolids, doc="Gets the stock solids associated with the setup.")

Setup.__swig_getmethods__["machine"] = Setup._get_machine
Setup.machine = property(Setup._get_machine, doc="Gets the Machine associated with the setup.")

Setup.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, Setup) else None
Setup.cast = lambda arg: arg if isinstance(arg, Setup) else None

class CAMPattern(CAMFolder):
    """Object that represents a pattern in an existing Setup, Folder or Pattern."""
    __swig_setmethods__ = {}
    for _s in [CAMFolder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMPattern, name, value)
    __swig_getmethods__ = {}
    for _s in [CAMFolder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAMPattern, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __deref__(self) -> "adsk::cam::CAMPattern *" : return _cam.CAMPattern___deref__(self)
    def __eq__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])) :
           return False


        return _cam.CAMPattern___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        if not isinstance(self, type(args[0])):
           return True


        return _cam.CAMPattern___ne__(self, *args)

    __swig_getmethods__["classType"] = lambda x: _cam.CAMPattern_classType
    if _newclass:classType = staticmethod(_cam.CAMPattern_classType)
    __swig_destroy__ = _cam.delete_CAMPattern
    __del__ = lambda self : None;
    def _get_isActive(self) -> "bool" :
        """Gets if this folder is active."""
        return _cam.CAMPattern__get_isActive(self)

    def _get_operations(self) -> "adsk::core::Ptr< adsk::cam::Operations >" :
        """
        Returns the Operations collection that provides access to existing individual operations 
        in this folder.
        """
        return _cam.CAMPattern__get_operations(self)

    def _get_folders(self) -> "adsk::core::Ptr< adsk::cam::CAMFolders >" :
        """
        Returns the Folders collection that provides access to existing folders 
        in this folder.
        """
        return _cam.CAMPattern__get_folders(self)

    def _get_patterns(self) -> "adsk::core::Ptr< adsk::cam::CAMPatterns >" :
        """
        Returns the Patterns collection that provides access to existing patterns 
        in this folder.
        """
        return _cam.CAMPattern__get_patterns(self)

    def _get_children(self) -> "adsk::core::Ptr< adsk::cam::ChildOperationList >" :
        """
        Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this folder
        in the order they appear in the browser.
        """
        return _cam.CAMPattern__get_children(self)

    def _get_parent(self) -> "adsk::core::Ptr< adsk::core::Base >" :
        """Returns the parent Setup, Folder or Pattern for this Folder."""
        return _cam.CAMPattern__get_parent(self)

    def _get_allOperations(self) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Gets a collection containing all of the operations in this folder. 
        This includes all operations nested in folders and patterns.
        """
        return _cam.CAMPattern__get_allOperations(self)

    def createFromTemplate(self, *args) -> "adsk::core::Ptr< adsk::core::ObjectCollection >" :
        """
        Create and add operations, folders or patterns from the specified template file to the end of this folder. 
        templateFilePath : The full path to the template file. 
        Returns the collection containing all of the operations, folders and patterns created from the template file.
        """
        return _cam.CAMPattern_createFromTemplate(self, *args)

    def _get_name(self) -> "std::string" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.CAMPattern__get_name(self)

    def _set_name(self, *args) -> "bool" :
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared
        to the names of all other operations in the document.
        """
        return _cam.CAMPattern__set_name(self, *args)

    def _get_isProtected(self) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.CAMPattern__get_isProtected(self)

    def _set_isProtected(self, *args) -> "bool" :
        """
        Gets and sets the 'protected' property value of the operation.
        Gets/sets true if the operation is protected.
        """
        return _cam.CAMPattern__set_isProtected(self, *args)

    def _get_isOptional(self) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.CAMPattern__get_isOptional(self)

    def _set_isOptional(self, *args) -> "bool" :
        """
        Gets and sets the 'Optional' property value of the operation.
        Gets/sets true if the operation is optional.
        """
        return _cam.CAMPattern__set_isOptional(self, *args)

    def _get_isSuppressed(self) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.CAMPattern__get_isSuppressed(self)

    def _set_isSuppressed(self, *args) -> "bool" :
        """
        Gets and sets the 'Suppressed' property value of the operation.
        Gets/sets true if the operation is suppressed.
        """
        return _cam.CAMPattern__set_isSuppressed(self, *args)

    def _get_parentSetup(self) -> "adsk::core::Ptr< adsk::cam::Setup >" :
        """Gets the Setup this operation belongs to."""
        return _cam.CAMPattern__get_parentSetup(self)

    def _get_isSelected(self) -> "bool" :
        """Gets if this operation is selected in the 'Setups' browser."""
        return _cam.CAMPattern__get_isSelected(self)

    def _get_notes(self) -> "std::string" :
        """Gets and sets the notes of the operation."""
        return _cam.CAMPattern__get_notes(self)

    def _set_notes(self, *args) -> "bool" :
        """Gets and sets the notes of the operation."""
        return _cam.CAMPattern__set_notes(self, *args)

    def _get_operationId(self) -> "int" :
        """
        Returns the id of the operation. This id is unique as compared 
        to the ids of all other operations in the document. 
        This id will not change when changing the order or parent of the operation. 
        This id will remain valid when the document is saved and reloaded.
        """
        return _cam.CAMPattern__get_operationId(self)

    def _get_parameters(self) -> "adsk::core::Ptr< adsk::cam::CAMParameters >" :
        """Gets the CAMParameters collection for this operation."""
        return _cam.CAMPattern__get_parameters(self)

    def _get_objectType(self) -> "char const *" : return _cam.CAMPattern__get_objectType(self)
    def _get_isValid(self) -> "bool" : return _cam.CAMPattern__get_isValid(self)
CAMPattern_swigregister = _cam.CAMPattern_swigregister
CAMPattern_swigregister(CAMPattern)

def CAMPattern_classType() -> "char const *" :
  return _cam.CAMPattern_classType()
CAMPattern_classType = _cam.CAMPattern_classType

CAMPattern.__swig_getmethods__["cast"] = lambda arg: arg if isinstance(arg, CAMPattern) else None
CAMPattern.cast = lambda arg: arg if isinstance(arg, CAMPattern) else None

# This file is compatible with both classic and new-style classes.


